
# def create_stack():
#     stack = []
#     return stack

# def check_empty(stack):
#     return len(stack) == 0

# def push(stack, item):
#     stack.append(item)
#     print("pushed item: " + item)

# def pop(stack):
#     if (check_empty(stack)):
#         return "stack is empty"

#     return stack.pop()


# stack = create_stack()
# push(stack, str(1))
# push(stack, str(2))
# push(stack, str(3))
# push(stack, str(4))
# print("popped item: " + pop(stack))
# print("stack after popping an element: " + str(stack))



# def heapify(arr, n, i):
#     largest = i
#     left = 2 * i + 1
#     right = 2 * i + 2

#     if left < n and arr[i] < arr[left]:
#         largest = left

#     if right < n and arr[largest] < arr[right]:
#         largest = right

#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]
#         heapify(arr, n, largest)


# def heap_sort(arr):
#     n = len(arr)

#     for i in range(n, -1, -1):
#         heapify(arr, n, i)

#     for i in range(n-1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]
#         heapify(arr, i, 0)

#     return arr


# arr = [12, 11, 13, 5, 6, 7]
# print("original array: " + str(arr))
# heap_sort(arr)
# print("sorted array: " + str(arr))


l=[[8,2,7,1,5,4,3,9,6],[9,6,5,3,2,7,1,4,8],[3,4,1,6,8,9,7,5,2],
   [5,9,3,4,6,8,2,7,1],[4,7,2,5,1,3,6,8,9],[6,1,8,9,7,2,4,3,5],
   [7,8,6,2,3,5,9,1,4],[1,5,4,7,9,6,8,2,3],[2,3,9,8,4,1,5,6,7]]

def leftright(l):
    for i in range(len(l)):
        for j in range(len(l)):
            if l[i].count(l[i][j])>1:
                return False
    return True
if leftright(l) :
    print("leftright is valid")
else :
    print("Invalid")      



def topdown(l):
    for j in range(len(l)):
        for i in range(len(l)):
            for k in range(len(l)):
                if l[j][i]==l[k][i] and k!=j :
                    return False
    return True
if topdown(l) :
    print("topdown is valid")
else :
    print("Invalid")


